/**
 * chacha20.h - Header file for ChaCha20 stream cipher implementation
 * 
 * This header file provides the function prototypes and structures
 * for a ChaCha20 stream cipher implementation according to RFC 8439.
 * (https://datatracker.ietf.org/doc/html/rfc8439)
 * 
 * ChaCha20 is a stream cipher developed by Daniel J. Bernstein that
 * uses a 256-bit key and a 96-bit nonce to generate a keystream that
 * is XORed with the plaintext to produce ciphertext.
 * 
 * Allowed libraries: stdio.h, stdlib.h, string.h, math.h
 */

#ifndef CHACHA20_H
#define CHACHA20_H

#include <stdint.h>  /* For uint32_t, uint8_t */
#include <stddef.h>  /* For size_t */

/* --- Constants --- */
#define CHACHA20_KEY_SIZE 32    /* 256 bits */
#define CHACHA20_NONCE_SIZE 12  /* 96 bits (as per RFC 8439) */
#define CHACHA20_BLOCK_SIZE 64  /* 512 bits */
#define CHACHA20_ROUNDS 20      /* Number of rounds in ChaCha20 */

/**
 * ChaCha20 context structure
 * Holds the state of the cipher during encryption/decryption
 */
typedef struct {
    uint32_t state[16];              /* ChaCha20 state (4x4 matrix) */
    uint8_t keystream[CHACHA20_BLOCK_SIZE]; /* Generated keystream buffer */
    size_t position;                 /* Current position in keystream */
} chacha20_ctx;

/**
 * Initialize the ChaCha20 context with key, nonce, and counter
 * 
 * Sets up the initial 4x4 matrix state according to RFC 8439:
 * - constants (4 words): "expand 32-byte k" in ASCII
 * - key (8 words): 256-bit key
 * - counter (1 word): Block counter (usually 0 or 1)
 * - nonce (3 words): 96-bit nonce
 * 
 * @param ctx     Pointer to the chacha20_ctx structure to initialize
 * @param key     256-bit key (32 bytes)
 * @param nonce   96-bit nonce (12 bytes)
 * @param counter Initial counter value (usually 0 or 1)
 * @return        0 on success, -1 on failure (NULL pointers)
 */
int chacha20_init(chacha20_ctx *ctx, const uint8_t *key, const uint8_t *nonce, uint32_t counter);

/**
 * Process (encrypt or decrypt) data using ChaCha20
 * Note: ChaCha20 is symmetric, so the same function is used for both operations
 * 
 * This function XORs the input data with the keystream generated by ChaCha20.
 * It manages the keystream buffer, generating new blocks as needed.
 * 'input' and 'output' can point to the same buffer for in-place processing.
 * 
 * @param ctx       Pointer to the initialized chacha20_ctx structure
 * @param input     Input data (plaintext or ciphertext)
 * @param output    Output buffer (must be at least as large as input_len)
 * @param input_len Length of the input data in bytes
 * @return          0 on success, -1 on failure (NULL pointers or invalid parameters)
 */
int chacha20_process(chacha20_ctx *ctx, const uint8_t *input, uint8_t *output, size_t input_len);

/**
 * Generate a new block of keystream
 * This is an internal function used by chacha20_process
 * 
 * This function performs 20 rounds of ChaCha20 operations on the state
 * to produce a 64-byte keystream block, stores it in the context's
 * keystream buffer, and increments the block counter in the state.
 * 
 * @param ctx Pointer to the chacha20_ctx structure
 * @return    0 on success, -1 on failure
 */
int chacha20_block(chacha20_ctx *ctx);

/**
 * Helper function to perform the ChaCha20 quarter round operation
 * 
 * @param a Index of first state word
 * @param b Index of second state word
 * @param c Index of third state word
 * @param d Index of fourth state word
 * @param state The state array to modify
 */
void chacha20_quarterround(int a, int b, int c, int d, uint32_t *state);

/**
 * Zero sensitive data in memory to prevent leakage
 * This should be called when the context is no longer needed
 * 
 * @param ctx Pointer to the chacha20_ctx structure to clear
 */
void chacha20_cleanup(chacha20_ctx *ctx);

#endif /* CHACHA20_H */